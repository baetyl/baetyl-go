// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contact.proto

package baetyl

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Context              *MsgContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	Content              []byte      `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5036fff2565fb15, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetContext() *MsgContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Message) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type MsgContext struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TS                   uint64   `protobuf:"varint,2,opt,name=TS,proto3" json:"TS,omitempty"`
	QOS                  uint32   `protobuf:"varint,3,opt,name=QOS,proto3" json:"QOS,omitempty"`
	Retain               uint32   `protobuf:"varint,4,opt,name=Retain,proto3" json:"Retain,omitempty"`
	Topic                string   `protobuf:"bytes,5,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Src                  string   `protobuf:"bytes,6,opt,name=Src,proto3" json:"Src,omitempty"`
	Dest                 string   `protobuf:"bytes,7,opt,name=Dest,proto3" json:"Dest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgContext) Reset()         { *m = MsgContext{} }
func (m *MsgContext) String() string { return proto.CompactTextString(m) }
func (*MsgContext) ProtoMessage()    {}
func (*MsgContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5036fff2565fb15, []int{1}
}

func (m *MsgContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgContext.Unmarshal(m, b)
}
func (m *MsgContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgContext.Marshal(b, m, deterministic)
}
func (m *MsgContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContext.Merge(m, src)
}
func (m *MsgContext) XXX_Size() int {
	return xxx_messageInfo_MsgContext.Size(m)
}
func (m *MsgContext) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContext.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContext proto.InternalMessageInfo

func (m *MsgContext) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MsgContext) GetTS() uint64 {
	if m != nil {
		return m.TS
	}
	return 0
}

func (m *MsgContext) GetQOS() uint32 {
	if m != nil {
		return m.QOS
	}
	return 0
}

func (m *MsgContext) GetRetain() uint32 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *MsgContext) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MsgContext) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *MsgContext) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "baetyl.Message")
	proto.RegisterType((*MsgContext)(nil), "baetyl.MsgContext")
}

func init() { proto.RegisterFile("contact.proto", fileDescriptor_a5036fff2565fb15) }

var fileDescriptor_a5036fff2565fb15 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x18, 0x84, 0x4d, 0x37, 0xdb, 0xea, 0xaf, 0xab, 0xf2, 0x23, 0x12, 0x3c, 0x95, 0x9e, 0x72, 0x90,
	0x20, 0xeb, 0x23, 0x6c, 0x2f, 0x7b, 0x58, 0x64, 0xd3, 0xbe, 0xc0, 0xdf, 0x10, 0x96, 0x62, 0x69,
	0x96, 0xed, 0x7f, 0xd0, 0xd7, 0xf0, 0x89, 0xa5, 0x69, 0x57, 0xc1, 0x93, 0xb7, 0x99, 0xc9, 0x7c,
	0x21, 0x19, 0x58, 0xb9, 0xd0, 0x33, 0x39, 0x36, 0xc7, 0x53, 0xe0, 0x80, 0x69, 0x43, 0x9e, 0x3f,
	0xbb, 0x62, 0x0f, 0xd9, 0xce, 0x0f, 0x03, 0x1d, 0x3c, 0x3e, 0x43, 0xb6, 0x09, 0x3d, 0xfb, 0x0f,
	0x56, 0x22, 0x17, 0xfa, 0x7a, 0x8d, 0x66, 0x2a, 0x99, 0xdd, 0x70, 0x98, 0x4f, 0xec, 0xb9, 0x82,
	0x6a, 0x6e, 0xf7, 0xac, 0x92, 0x5c, 0xe8, 0x1b, 0x7b, 0xb6, 0xc5, 0x97, 0x00, 0xf8, 0x25, 0xf0,
	0x16, 0x92, 0x6d, 0x19, 0x6f, 0x94, 0x36, 0xd9, 0x96, 0xa3, 0xaf, 0xab, 0xc8, 0x48, 0x9b, 0xd4,
	0x15, 0xde, 0xc3, 0x62, 0xff, 0x56, 0xa9, 0x45, 0x2e, 0xf4, 0xca, 0x8e, 0x12, 0x1f, 0x21, 0xb5,
	0x9e, 0xa9, 0xed, 0x95, 0x8c, 0xe1, 0xec, 0xf0, 0x01, 0x96, 0x75, 0x38, 0xb6, 0x4e, 0x2d, 0x73,
	0xa1, 0xaf, 0xec, 0x64, 0x46, 0xbe, 0x3a, 0x39, 0x95, 0xc6, 0x6c, 0x94, 0x88, 0x20, 0x4b, 0x3f,
	0xb0, 0xca, 0x62, 0x14, 0xf5, 0xba, 0x9d, 0x9e, 0x4b, 0x8e, 0xd1, 0x80, 0xac, 0xa9, 0x7b, 0xc7,
	0xbb, 0x9f, 0xef, 0x4d, 0x03, 0x3c, 0xfd, 0x0d, 0x8a, 0x0b, 0x2d, 0x5e, 0x04, 0x1a, 0xb8, 0xdc,
	0x50, 0xd7, 0x35, 0xe4, 0xfe, 0xc5, 0x34, 0x69, 0x5c, 0xf8, 0xf5, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x77, 0x64, 0xee, 0x12, 0x72, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContactClient is the client API for Contact service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactClient interface {
	Talk(ctx context.Context, opts ...grpc.CallOption) (Contact_TalkClient, error)
	Callback(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type contactClient struct {
	cc *grpc.ClientConn
}

func NewContactClient(cc *grpc.ClientConn) ContactClient {
	return &contactClient{cc}
}

func (c *contactClient) Talk(ctx context.Context, opts ...grpc.CallOption) (Contact_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Contact_serviceDesc.Streams[0], "/baetyl.Contact/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &contactTalkClient{stream}
	return x, nil
}

type Contact_TalkClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type contactTalkClient struct {
	grpc.ClientStream
}

func (x *contactTalkClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactTalkClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactClient) Callback(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/baetyl.Contact/Callback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServer is the server API for Contact service.
type ContactServer interface {
	Talk(Contact_TalkServer) error
	Callback(context.Context, *Message) (*Message, error)
}

// UnimplementedContactServer can be embedded to have forward compatible implementations.
type UnimplementedContactServer struct {
}

func (*UnimplementedContactServer) Talk(srv Contact_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (*UnimplementedContactServer) Callback(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}

func RegisterContactServer(s *grpc.Server, srv ContactServer) {
	s.RegisterService(&_Contact_serviceDesc, srv)
}

func _Contact_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactServer).Talk(&contactTalkServer{stream})
}

type Contact_TalkServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type contactTalkServer struct {
	grpc.ServerStream
}

func (x *contactTalkServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactTalkServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Contact_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baetyl.Contact/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServer).Callback(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contact_serviceDesc = grpc.ServiceDesc{
	ServiceName: "baetyl.Contact",
	HandlerType: (*ContactServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Callback",
			Handler:    _Contact_Callback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _Contact_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contact.proto",
}
