// Code generated by protoc-gen-go. DO NOT EDIT.
// source: link.proto

package link

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Context              *Context `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ee656911eb8a56a, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Message) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Context struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TS                   uint64   `protobuf:"varint,2,opt,name=TS,proto3" json:"TS,omitempty"`
	QOS                  uint32   `protobuf:"varint,3,opt,name=QOS,proto3" json:"QOS,omitempty"`
	Flags                uint32   `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Topic                string   `protobuf:"bytes,5,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Source               string   `protobuf:"bytes,6,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination          string   `protobuf:"bytes,7,opt,name=Destination,proto3" json:"Destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ee656911eb8a56a, []int{1}
}

func (m *Context) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Context.Unmarshal(m, b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Context.Marshal(b, m, deterministic)
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return xxx_messageInfo_Context.Size(m)
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Context) GetTS() uint64 {
	if m != nil {
		return m.TS
	}
	return 0
}

func (m *Context) GetQOS() uint32 {
	if m != nil {
		return m.QOS
	}
	return 0
}

func (m *Context) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Context) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Context) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Context) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "link.Message")
	proto.RegisterType((*Context)(nil), "link.Context")
}

func init() { proto.RegisterFile("link.proto", fileDescriptor_2ee656911eb8a56a) }

var fileDescriptor_2ee656911eb8a56a = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xcd, 0x36, 0xdd, 0xc5, 0xa9, 0x15, 0x19, 0x44, 0x82, 0xa7, 0xb0, 0x07, 0x0d, 0x1e,
	0x8a, 0xd4, 0x47, 0xe8, 0x22, 0x14, 0x2a, 0x62, 0x76, 0x4f, 0xde, 0x62, 0x09, 0x25, 0x6c, 0x48,
	0x4a, 0x37, 0x82, 0xaf, 0xe3, 0x9b, 0x4a, 0xd2, 0xac, 0xe8, 0xa9, 0xb7, 0xf9, 0xbe, 0xf9, 0x33,
	0x90, 0x1f, 0xc0, 0x1a, 0xd7, 0x2f, 0xf6, 0x07, 0x1f, 0x3c, 0xd2, 0x38, 0xd7, 0x1b, 0xa8, 0x5e,
	0xf4, 0x30, 0xa8, 0x9d, 0xc6, 0x7b, 0xa8, 0x56, 0xde, 0x05, 0xfd, 0x15, 0x18, 0xe1, 0x44, 0xcc,
	0x96, 0xf3, 0x45, 0x8a, 0x67, 0x29, 0xc7, 0x2d, 0xb2, 0x1c, 0x74, 0x81, 0x15, 0x9c, 0x88, 0x0b,
	0x39, 0x62, 0xfd, 0x4d, 0x7e, 0x6f, 0xe0, 0x25, 0x14, 0xeb, 0x26, 0x5d, 0xa2, 0xb2, 0x58, 0x37,
	0x91, 0xbb, 0x36, 0x3d, 0xa0, 0xb2, 0xe8, 0x5a, 0xbc, 0x82, 0xc9, 0xdb, 0x6b, 0xcb, 0x26, 0x9c,
	0x88, 0xb9, 0x8c, 0x23, 0x5e, 0xc3, 0xf4, 0xd9, 0xaa, 0xdd, 0xc0, 0x68, 0x72, 0x47, 0x88, 0xb6,
	0xf3, 0x7b, 0xb3, 0x65, 0x53, 0x4e, 0xc4, 0xb9, 0x3c, 0x02, 0xde, 0x40, 0xd9, 0xfa, 0xcf, 0xc3,
	0x56, 0xb3, 0x32, 0xe9, 0x4c, 0xc8, 0x61, 0xd6, 0xe8, 0x21, 0x18, 0xa7, 0x82, 0xf1, 0x8e, 0x55,
	0x69, 0xf9, 0x57, 0x2d, 0xdf, 0x81, 0x6e, 0x8c, 0xeb, 0xf1, 0x01, 0x68, 0xa7, 0x6c, 0x8f, 0xf9,
	0x97, 0xb9, 0x85, 0xdb, 0xff, 0x58, 0x9f, 0x09, 0xf2, 0x48, 0xf0, 0x0e, 0xe8, 0x4a, 0x59, 0x7b,
	0x2a, 0xfb, 0x51, 0xa6, 0x6a, 0x9f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x26, 0x1c, 0x23, 0x0e,
	0x68, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LinkClient is the client API for Link service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LinkClient interface {
	Talk(ctx context.Context, opts ...grpc.CallOption) (Link_TalkClient, error)
	Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type linkClient struct {
	cc *grpc.ClientConn
}

func NewLinkClient(cc *grpc.ClientConn) LinkClient {
	return &linkClient{cc}
}

func (c *linkClient) Talk(ctx context.Context, opts ...grpc.CallOption) (Link_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Link_serviceDesc.Streams[0], "/link.Link/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &linkTalkClient{stream}
	return x, nil
}

type Link_TalkClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type linkTalkClient struct {
	grpc.ClientStream
}

func (x *linkTalkClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *linkTalkClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *linkClient) Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/link.Link/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkServer is the server API for Link service.
type LinkServer interface {
	Talk(Link_TalkServer) error
	Call(context.Context, *Message) (*Message, error)
}

// UnimplementedLinkServer can be embedded to have forward compatible implementations.
type UnimplementedLinkServer struct {
}

func (*UnimplementedLinkServer) Talk(srv Link_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (*UnimplementedLinkServer) Call(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterLinkServer(s *grpc.Server, srv LinkServer) {
	s.RegisterService(&_Link_serviceDesc, srv)
}

func _Link_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinkServer).Talk(&linkTalkServer{stream})
}

type Link_TalkServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type linkTalkServer struct {
	grpc.ServerStream
}

func (x *linkTalkServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *linkTalkServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Link_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/link.Link/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServer).Call(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Link_serviceDesc = grpc.ServiceDesc{
	ServiceName: "link.Link",
	HandlerType: (*LinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Link_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _Link_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "link.proto",
}
