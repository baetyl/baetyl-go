// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-go/link (interfaces: LinkClient)

// Package link is a generated GoMock package.
package link

import (
	context "context"
	link "github.com/baetyl/baetyl-go/link"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLinkClient is a mock of LinkClient interface
type MockLinkClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkClientMockRecorder
}

// MockLinkClientMockRecorder is the mock recorder for MockLinkClient
type MockLinkClientMockRecorder struct {
	mock *MockLinkClient
}

// NewMockLinkClient creates a new mock instance
func NewMockLinkClient(ctrl *gomock.Controller) *MockLinkClient {
	mock := &MockLinkClient{ctrl: ctrl}
	mock.recorder = &MockLinkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinkClient) EXPECT() *MockLinkClientMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockLinkClient) Call(arg0 context.Context, arg1 *link.Message, arg2 ...grpc.CallOption) (*link.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*link.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockLinkClientMockRecorder) Call(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockLinkClient)(nil).Call), varargs...)
}

// Talk mocks base method
func (m *MockLinkClient) Talk(arg0 context.Context, arg1 ...grpc.CallOption) (link.Link_TalkClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Talk", varargs...)
	ret0, _ := ret[0].(link.Link_TalkClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Talk indicates an expected call of Talk
func (mr *MockLinkClientMockRecorder) Talk(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Talk", reflect.TypeOf((*MockLinkClient)(nil).Talk), varargs...)
}
