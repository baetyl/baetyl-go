// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-go/v2/pki (interfaces: PKI)

// Package pki is a generated GoMock package.
package pki

import (
	x509 "crypto/x509"
	models "github.com/baetyl/baetyl-go/v2/pki/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPKI is a mock of PKI interface
type MockPKI struct {
	ctrl     *gomock.Controller
	recorder *MockPKIMockRecorder
}

// MockPKIMockRecorder is the mock recorder for MockPKI
type MockPKIMockRecorder struct {
	mock *MockPKI
}

// NewMockPKI creates a new mock instance
func NewMockPKI(ctrl *gomock.Controller) *MockPKI {
	mock := &MockPKI{ctrl: ctrl}
	mock.recorder = &MockPKIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPKI) EXPECT() *MockPKIMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockPKI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPKIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPKI)(nil).Close))
}

// CreateRootCert mocks base method
func (m *MockPKI) CreateRootCert(arg0 *x509.CertificateRequest, arg1 int, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRootCert", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRootCert indicates an expected call of CreateRootCert
func (mr *MockPKIMockRecorder) CreateRootCert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRootCert", reflect.TypeOf((*MockPKI)(nil).CreateRootCert), arg0, arg1, arg2)
}

// CreateSelfSignedRootCert mocks base method
func (m *MockPKI) CreateSelfSignedRootCert(arg0 *x509.CertificateRequest, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSelfSignedRootCert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSelfSignedRootCert indicates an expected call of CreateSelfSignedRootCert
func (mr *MockPKIMockRecorder) CreateSelfSignedRootCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelfSignedRootCert", reflect.TypeOf((*MockPKI)(nil).CreateSelfSignedRootCert), arg0, arg1)
}

// CreateSubCert mocks base method
func (m *MockPKI) CreateSubCert(arg0 []byte, arg1 int, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubCert", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubCert indicates an expected call of CreateSubCert
func (mr *MockPKIMockRecorder) CreateSubCert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubCert", reflect.TypeOf((*MockPKI)(nil).CreateSubCert), arg0, arg1, arg2)
}

// DeleteRootCert mocks base method
func (m *MockPKI) DeleteRootCert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootCert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootCert indicates an expected call of DeleteRootCert
func (mr *MockPKIMockRecorder) DeleteRootCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootCert", reflect.TypeOf((*MockPKI)(nil).DeleteRootCert), arg0)
}

// DeleteSubCert mocks base method
func (m *MockPKI) DeleteSubCert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubCert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubCert indicates an expected call of DeleteSubCert
func (mr *MockPKIMockRecorder) DeleteSubCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubCert", reflect.TypeOf((*MockPKI)(nil).DeleteSubCert), arg0)
}

// GetRootCert mocks base method
func (m *MockPKI) GetRootCert(arg0 string) (*models.CertPem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCert", arg0)
	ret0, _ := ret[0].(*models.CertPem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCert indicates an expected call of GetRootCert
func (mr *MockPKIMockRecorder) GetRootCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCert", reflect.TypeOf((*MockPKI)(nil).GetRootCert), arg0)
}

// GetSubCert mocks base method
func (m *MockPKI) GetSubCert(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubCert indicates an expected call of GetSubCert
func (mr *MockPKIMockRecorder) GetSubCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCert", reflect.TypeOf((*MockPKI)(nil).GetSubCert), arg0)
}
